(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{626:function(e,t,n){"use strict";n.r(t);var s=n(8),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"队列queue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#队列queue"}},[e._v("#")]),e._v(" 队列Queue")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("package")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("util")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n * A collection designed for holding elements prior to processing.\n * Besides basic {@link java.util.Collection Collection} operations,\n * queues provide additional insertion, extraction, and inspection\n * operations.  Each of these methods exists in two forms: one throws\n * an exception if the operation fails, the other returns a special\n * value (either {@code null} or {@code false}, depending on the\n * operation).  The latter form of the insert operation is designed\n * specifically for use with capacity-restricted {@code Queue}\n * implementations; in most implementations, insert operations cannot\n * fail.\n *\n * <table BORDER CELLPADDING=3 CELLSPACING=1>\n * <caption>Summary of Queue methods</caption>\n *  <tr>\n *    <td></td>\n *    <td ALIGN=CENTER><em>Throws exception</em></td>\n *    <td ALIGN=CENTER><em>Returns special value</em></td>\n *  </tr>\n *  <tr>\n *    <td><b>Insert</b></td>\n *    <td>{@link Queue#add add(e)}</td>\n *    <td>{@link Queue#offer offer(e)}</td>\n *  </tr>\n *  <tr>\n *    <td><b>Remove</b></td>\n *    <td>{@link Queue#remove remove()}</td>\n *    <td>{@link Queue#poll poll()}</td>\n *  </tr>\n *  <tr>\n *    <td><b>Examine</b></td>\n *    <td>{@link Queue#element element()}</td>\n *    <td>{@link Queue#peek peek()}</td>\n *  </tr>\n * </table>\n *\n * <p>Queues typically, but do not necessarily, order elements in a\n * FIFO (first-in-first-out) manner.  Among the exceptions are\n * priority queues, which order elements according to a supplied\n * comparator, or the elements' natural ordering, and LIFO queues (or\n * stacks) which order the elements LIFO (last-in-first-out).\n * Whatever the ordering used, the <em>head</em> of the queue is that\n * element which would be removed by a call to {@link #remove() } or\n * {@link #poll()}.  In a FIFO queue, all new elements are inserted at\n * the <em>tail</em> of the queue. Other kinds of queues may use\n * different placement rules.  Every {@code Queue} implementation\n * must specify its ordering properties.\n *\n * <p>The {@link #offer offer} method inserts an element if possible,\n * otherwise returning {@code false}.  This differs from the {@link\n * java.util.Collection#add Collection.add} method, which can fail to\n * add an element only by throwing an unchecked exception.  The\n * {@code offer} method is designed for use when failure is a normal,\n * rather than exceptional occurrence, for example, in fixed-capacity\n * (or &quot;bounded&quot;) queues.\n *\n * <p>The {@link #remove()} and {@link #poll()} methods remove and\n * return the head of the queue.\n * Exactly which element is removed from the queue is a\n * function of the queue's ordering policy, which differs from\n * implementation to implementation. The {@code remove()} and\n * {@code poll()} methods differ only in their behavior when the\n * queue is empty: the {@code remove()} method throws an exception,\n * while the {@code poll()} method returns {@code null}.\n *\n * <p>The {@link #element()} and {@link #peek()} methods return, but do\n * not remove, the head of the queue.\n *\n * <p>The {@code Queue} interface does not define the <i>blocking queue\n * methods</i>, which are common in concurrent programming.  These methods,\n * which wait for elements to appear or for space to become available, are\n * defined in the {@link java.util.concurrent.BlockingQueue} interface, which\n * extends this interface.\n *\n * <p>{@code Queue} implementations generally do not allow insertion\n * of {@code null} elements, although some implementations, such as\n * {@link LinkedList}, do not prohibit insertion of {@code null}.\n * Even in the implementations that permit it, {@code null} should\n * not be inserted into a {@code Queue}, as {@code null} is also\n * used as a special return value by the {@code poll} method to\n * indicate that the queue contains no elements.\n *\n * <p>{@code Queue} implementations generally do not define\n * element-based versions of methods {@code equals} and\n * {@code hashCode} but instead inherit the identity based versions\n * from class {@code Object}, because element-based equality is not\n * always well-defined for queues with the same elements but different\n * ordering properties.\n *\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n * Java Collections Framework</a>.\n *\n * @see java.util.Collection\n * @see LinkedList\n * @see PriorityQueue\n * @see java.util.concurrent.LinkedBlockingQueue\n * @see java.util.concurrent.BlockingQueue\n * @see java.util.concurrent.ArrayBlockingQueue\n * @see java.util.concurrent.LinkedBlockingQueue\n * @see java.util.concurrent.PriorityBlockingQueue\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this collection\n */")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Queue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element into this queue if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an {@code IllegalStateException}\n     * if no space is currently available.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element into this queue if it is possible to do\n     * so immediately without violating capacity restrictions.\n     * When using a capacity-restricted queue, this method is generally\n     * preferable to {@link #add}, which can fail to insert an element only\n     * by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this queue, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("offer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the head of this queue.  This method differs\n     * from {@link #poll poll} only in that it throws an exception if this\n     * queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the head of this queue,\n     * or returns {@code null} if this queue is empty.\n     *\n     * @return the head of this queue, or {@code null} if this queue is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the head of this queue.  This method\n     * differs from {@link #peek peek} only in that it throws an exception\n     * if this queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("element")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the head of this queue,\n     * or returns {@code null} if this queue is empty.\n     *\n     * @return the head of this queue, or {@code null} if this queue is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("peek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h2",{attrs:{id:"deque"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[e._v("#")]),e._v(" DeQue")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("package")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("java"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("util")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n * A linear collection that supports element insertion and removal at\n * both ends.  The name <i>deque</i> is short for "double ended queue"\n * and is usually pronounced "deck".  Most {@code Deque}\n * implementations place no fixed limits on the number of elements\n * they may contain, but this interface supports capacity-restricted\n * deques as well as those with no fixed size limit.\n *\n * <p>This interface defines methods to access the elements at both\n * ends of the deque.  Methods are provided to insert, remove, and\n * examine the element.  Each of these methods exists in two forms:\n * one throws an exception if the operation fails, the other returns a\n * special value (either {@code null} or {@code false}, depending on\n * the operation).  The latter form of the insert operation is\n * designed specifically for use with capacity-restricted\n * {@code Deque} implementations; in most implementations, insert\n * operations cannot fail.\n *\n * <p>The twelve methods described above are summarized in the\n * following table:\n *\n * <table BORDER CELLPADDING=3 CELLSPACING=1>\n * <caption>Summary of Deque methods</caption>\n *  <tr>\n *    <td></td>\n *    <td ALIGN=CENTER COLSPAN = 2> <b>First Element (Head)</b></td>\n *    <td ALIGN=CENTER COLSPAN = 2> <b>Last Element (Tail)</b></td>\n *  </tr>\n *  <tr>\n *    <td></td>\n *    <td ALIGN=CENTER><em>Throws exception</em></td>\n *    <td ALIGN=CENTER><em>Special value</em></td>\n *    <td ALIGN=CENTER><em>Throws exception</em></td>\n *    <td ALIGN=CENTER><em>Special value</em></td>\n *  </tr>\n *  <tr>\n *    <td><b>Insert</b></td>\n *    <td>{@link Deque#addFirst addFirst(e)}</td>\n *    <td>{@link Deque#offerFirst offerFirst(e)}</td>\n *    <td>{@link Deque#addLast addLast(e)}</td>\n *    <td>{@link Deque#offerLast offerLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <td><b>Remove</b></td>\n *    <td>{@link Deque#removeFirst removeFirst()}</td>\n *    <td>{@link Deque#pollFirst pollFirst()}</td>\n *    <td>{@link Deque#removeLast removeLast()}</td>\n *    <td>{@link Deque#pollLast pollLast()}</td>\n *  </tr>\n *  <tr>\n *    <td><b>Examine</b></td>\n *    <td>{@link Deque#getFirst getFirst()}</td>\n *    <td>{@link Deque#peekFirst peekFirst()}</td>\n *    <td>{@link Deque#getLast getLast()}</td>\n *    <td>{@link Deque#peekLast peekLast()}</td>\n *  </tr>\n * </table>\n *\n * <p>This interface extends the {@link Queue} interface.  When a deque is\n * used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are\n * added at the end of the deque and removed from the beginning.  The methods\n * inherited from the {@code Queue} interface are precisely equivalent to\n * {@code Deque} methods as indicated in the following table:\n *\n * <table BORDER CELLPADDING=3 CELLSPACING=1>\n * <caption>Comparison of Queue and Deque methods</caption>\n *  <tr>\n *    <td ALIGN=CENTER> <b>{@code Queue} Method</b></td>\n *    <td ALIGN=CENTER> <b>Equivalent {@code Deque} Method</b></td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#add add(e)}</td>\n *    <td>{@link #addLast addLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#offer offer(e)}</td>\n *    <td>{@link #offerLast offerLast(e)}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#remove remove()}</td>\n *    <td>{@link #removeFirst removeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#poll poll()}</td>\n *    <td>{@link #pollFirst pollFirst()}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#element element()}</td>\n *    <td>{@link #getFirst getFirst()}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link java.util.Queue#peek peek()}</td>\n *    <td>{@link #peek peekFirst()}</td>\n *  </tr>\n * </table>\n *\n * <p>Deques can also be used as LIFO (Last-In-First-Out) stacks.  This\n * interface should be used in preference to the legacy {@link Stack} class.\n * When a deque is used as a stack, elements are pushed and popped from the\n * beginning of the deque.  Stack methods are precisely equivalent to\n * {@code Deque} methods as indicated in the table below:\n *\n * <table BORDER CELLPADDING=3 CELLSPACING=1>\n * <caption>Comparison of Stack and Deque methods</caption>\n *  <tr>\n *    <td ALIGN=CENTER> <b>Stack Method</b></td>\n *    <td ALIGN=CENTER> <b>Equivalent {@code Deque} Method</b></td>\n *  </tr>\n *  <tr>\n *    <td>{@link #push push(e)}</td>\n *    <td>{@link #addFirst addFirst(e)}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link #pop pop()}</td>\n *    <td>{@link #removeFirst removeFirst()}</td>\n *  </tr>\n *  <tr>\n *    <td>{@link #peek peek()}</td>\n *    <td>{@link #peekFirst peekFirst()}</td>\n *  </tr>\n * </table>\n *\n * <p>Note that the {@link #peek peek} method works equally well when\n * a deque is used as a queue or a stack; in either case, elements are\n * drawn from the beginning of the deque.\n *\n * <p>This interface provides two methods to remove interior\n * elements, {@link #removeFirstOccurrence removeFirstOccurrence} and\n * {@link #removeLastOccurrence removeLastOccurrence}.\n *\n * <p>Unlike the {@link List} interface, this interface does not\n * provide support for indexed access to elements.\n *\n * <p>While {@code Deque} implementations are not strictly required\n * to prohibit the insertion of null elements, they are strongly\n * encouraged to do so.  Users of any {@code Deque} implementations\n * that do allow null elements are strongly encouraged <i>not</i> to\n * take advantage of the ability to insert nulls.  This is so because\n * {@code null} is used as a special return value by various methods\n * to indicated that the deque is empty.\n *\n * <p>{@code Deque} implementations generally do not define\n * element-based versions of the {@code equals} and {@code hashCode}\n * methods, but instead inherit the identity-based versions from class\n * {@code Object}.\n *\n * <p>This interface is a member of the <a\n * href="{@docRoot}/../technotes/guides/collections/index.html"> Java Collections\n * Framework</a>.\n *\n * @author Doug Lea\n * @author Josh Bloch\n * @since  1.6\n * @param <E> the type of elements held in this collection\n */')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Deque")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Queue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element at the front of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use method {@link #offerFirst}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("addFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element at the end of this deque if it is\n     * possible to do so immediately without violating capacity restrictions,\n     * throwing an {@code IllegalStateException} if no space is currently\n     * available.  When using a capacity-restricted deque, it is generally\n     * preferable to use method {@link #offerLast}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @param e the element to add\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("addLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element at the front of this deque unless it would\n     * violate capacity restrictions.  When using a capacity-restricted deque,\n     * this method is generally preferable to the {@link #addFirst} method,\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("offerFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element at the end of this deque unless it would\n     * violate capacity restrictions.  When using a capacity-restricted deque,\n     * this method is generally preferable to the {@link #addLast} method,\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("offerLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the first element of this deque.  This method\n     * differs from {@link #pollFirst pollFirst} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * @return the head of this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the last element of this deque.  This method\n     * differs from {@link #pollLast pollLast} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * @return the tail of this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the first element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("pollFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the last element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the tail of this deque, or {@code null} if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("pollLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the first element of this deque.\n     *\n     * This method differs from {@link #peekFirst peekFirst} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * @return the head of this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("getFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the last element of this deque.\n     * This method differs from {@link #peekLast peekLast} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * @return the tail of this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("getLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the first element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the head of this deque, or {@code null} if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("peekFirst")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the last element of this deque,\n     * or returns {@code null} if this deque is empty.\n     *\n     * @return the tail of this deque, or {@code null} if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("peekLast")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n     * (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     */')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeFirstOccurrence")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" o"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n     * Removes the last occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element {@code e} such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n     * (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     */')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("removeLastOccurrence")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" o"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// *** Queue methods ***")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     * When using a capacity-restricted deque, it is generally preferable to\n     * use {@link #offer(Object) offer}.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Inserts the specified element into the queue represented by this deque\n     * (in other words, at the tail of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * {@code true} upon success and {@code false} if no space is currently\n     * available.  When using a capacity-restricted deque, this method is\n     * generally preferable to the {@link #add} method, which can fail to\n     * insert an element only by throwing an exception.\n     *\n     * <p>This method is equivalent to {@link #offerLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} if the element was added to this deque, else\n     *         {@code false}\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("offer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque).\n     * This method differs from {@link #poll poll} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), or returns\n     * {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #pollFirst()}.\n     *\n     * @return the first element of this deque, or {@code null} if\n     *         this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque).\n     * This method differs from {@link #peek peek} only in that it throws an\n     * exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst()}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("element")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque (in other words, the first element of this deque), or\n     * returns {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #peekFirst()}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         {@code null} if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("peek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// *** Stack methods ***")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Pushes an element onto the stack represented by this deque (in other\n     * words, at the head of this deque) if it is possible to do so\n     * immediately without violating capacity restrictions, throwing an\n     * {@code IllegalStateException} if no space is currently available.\n     *\n     * <p>This method is equivalent to {@link #addFirst}.\n     *\n     * @param e the element to push\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this deque\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Pops an element from the stack represented by this deque.  In other\n     * words, removes and returns the first element of this deque.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the element at the front of this deque (which is the top\n     *         of the stack represented by this deque)\n     * @throws NoSuchElementException if this deque is empty\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// *** Collection methods ***")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n     * Removes the first occurrence of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>\n     * (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to {@link #removeFirstOccurrence(Object)}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if an element was removed as a result of this call\n     * @throws ClassCastException if the class of the specified element\n     *         is incompatible with this deque\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     */')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" o"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/**\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that\n     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n     *\n     * @param o element whose presence in this deque is to be tested\n     * @return {@code true} if this deque contains the specified element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this deque\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         deque does not permit null elements\n     * (<a href="Collection.html#optional-restrictions">optional</a>)\n     */')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("contains")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" o"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Returns an iterator over the elements in this deque in proper sequence.\n     * The elements will be returned in order from first (head) to last (tail).\n     *\n     * @return an iterator over the elements in this deque in proper sequence\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("iterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n     * Returns an iterator over the elements in this deque in reverse\n     * sequential order.  The elements will be returned in order from\n     * last (tail) to first (head).\n     *\n     * @return an iterator over the elements in this deque in reverse\n     * sequence\n     */")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Iterator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("descendingIterator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h2",{attrs:{id:"阻塞队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[e._v("#")]),e._v(" 阻塞队列")])])}),[],!1,null,null,null);t.default=a.exports}}]);